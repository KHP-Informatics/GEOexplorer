% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/backendDifferentialGeneExpressionDataFunctions.R
\name{calculateDifferentialGeneExpression}
\alias{calculateDifferentialGeneExpression}
\title{A Function to Calculate the Differential Gene EXpression between two groups}
\usage{
calculateDifferentialGeneExpression(
  gsms,
  limmaPrecisionWeights,
  forceNormalization,
  gset,
  ex
)
}
\arguments{
\item{gsms}{A string of integers indicating which group a sample belongs to, which can be calculated form the calculateEachGroupsSamples() function}

\item{limmaPrecisionWeights}{Whether to apply limma precision weights (vooma)}

\item{forceNormalization}{Whether to force normalization}

\item{gset}{The GEO object which can be obtained from the extractPlatformGset() function}

\item{ex}{The GEO expression object which can be obtained from the extractExpressionData() function}
}
\description{
This function calculates the differential expression for two groups
}
\examples{
# Get the GEO data for all platforms
geoAccessionCode <- "GSE18388"
allGset <- getGeoObject(geoAccessionCode)

# Extract platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]

# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)

# Extract expression data
expressionData <- extractExpressionData(gsetData)

# Apply log transformation to expression data if necessary
logTransformation <- "Auto-Detect"
dataInput <- calculateLogTransformation(expressionData, logTransformation)

# Perform KNN transformation on log expression data if necessary
knnDataInput <- calculateKnnImpute(dataInput, "Yes")

# Extract experimental condition/sample names
columnNames <- extractSampleNames(expressionData)

# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()

for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
 i <- i +1
 } else {
 group2 <- c(group2, name)
 i <- i +1
 }
 }

 # Select columns in group2
 column2 <- calculateExclusiveColumns(columnNames, group1)

 # Calculate gsms
 gsms <- calculateEachGroupsSamples(columnNames,group1, group2)

 # Convert P value adjustment
 pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
 adjustment <- convertAdjustment(pValueAdjustment)
 # Get fit 2
 limmaPrecisionWeights <- "Yes"
 forceNormalization <- "Yes"
 fit2 <- calculateDifferentialGeneExpression(gsms, limmaPrecisionWeights, forceNormalization, gsetData, knnDataInput)

}
\seealso{
\code{\link[=extractExpressionData]{extractExpressionData()}} for expression object, \code{\link[=extractPlatformGset]{extractPlatformGset()}} for GEO object, \code{\link[=calculateEachGroupsSamples]{calculateEachGroupsSamples()}} for the string of integers indicating which group a sample belongs to
}
\author{
Guy Hunt
}
\keyword{GEO}
\keyword{internal}
