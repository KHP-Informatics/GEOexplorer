group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
# Get fit2 data
#fit2 <- differentialGeneExpression(gsetData, knnDataInput, gsms, limmaPrecisionWeights, forceNormalization)
# Get fit 2 2
fit2 <- calculateFit2(gsms, logTransformation, limmaPrecisionWeights, forceNormalization, knnTransformation)
fit2 <- calculateFit2(gsms, logTransformation, limmaPrecisionWeights, forceNormalization, knnTransformation, gsetData)
fvarLabels(gsetData) <- make.names(fvarLabels(gsetData))
sml <- strsplit(gsms, split="")[[1]]
ex <- extractExpressionData(gsetData)
ex <- logTransformExpressionData(ex, logTransformation)
ex <- knnDataTransformation(ex, knnTransformation)
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
gset <- gsetData[ ,sel]
ex <- ex[ ,sel]
exprs(gsetData) <- ex
ex <- extractExpressionData(gsetData)
ex <- logTransformExpressionData(ex, logTransformation)
sel
sml
ex <- extractExpressionData(gsetData)
ex
dim(ex)
ex <- logTransformExpressionData(ex, logTransformation)
dim(ex)
ex <- knnDataTransformation(ex, knnTransformation)
dim(ex)
ex <- extractExpressionData(gsetData)
ex <- logTransformExpressionData(ex, logTransformation)
dim(impute.knn(ex))
y <- impute.knn(ex)
dim(y)
y <- impute.knn(ex)
dim(y)
ex <- knnDataTransformation(ex, knnTransformation)
ex
row.names(ex)
exprs(gsetData)
exprs(gsetData) <- exprs(gsetData)[ ! row.names(exprs(gsetData)) %in% row.names(ex), ]
row.names(gsetData)
gsetData <- gsetData[ ! row.names(gsetData) %in% row.names(ex), ]
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
source("interactiveDataVisualizationFunctions/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
goodList <- list('GSE18388', 'GSE25770')
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
investigateList <- list('GSE25771', 'GSE25772')
#for(geoAccessionCode in goodList)
#{
geoAccessionCode <- "GSE18380"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
#dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
#autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
#knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
#naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
#pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
# Get fit 2
fit2 <- calculateFit2(gsms, logTransformation, limmaPrecisionWeights, forceNormalization, knnTransformation, gsetData)
fvarLabels(gsetData) <- make.names(fvarLabels(gsetData))
sml <- strsplit(gsms, split="")[[1]]
ex <- extractExpressionData(gsetData)
ex <- logTransformExpressionData(ex, logTransformation)
ex <- knnDataTransformation(ex, knnTransformation)
gsetData <- gsetData[ ! row.names(gsetData) %in% row.names(ex), ]
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gsetData[ ,sel]
ex <- ex[ ,sel]
exprs(gsetData) <- ex
row.names(gsetData)
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
source("interactiveDataVisualizationFunctions/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
goodList <- list('GSE18388', 'GSE25770')
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
investigateList <- list('GSE25771', 'GSE25772')
#for(geoAccessionCode in goodList)
#{
geoAccessionCode <- "GSE18380"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
#dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
#autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
#knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
#naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
#pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
# Get fit 2
fit2 <- calculateFit2(gsms, logTransformation, limmaPrecisionWeights, forceNormalization, knnTransformation, gsetData)
tT <- topDifferentiallyExpressedGenesTable(fit2, adjustment)
fig <- histogramPlot(fit2, adjustment)
fig <- interactiveHistogramPlot(fit2, adjustment)
fig
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
goodList <- list('GSE18388', 'GSE25770')
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
investigateList <- list('GSE25771', 'GSE25772')
geoAccessionCode <- "GSE18380"
allGset <- getGset(geoAccessionCode)
allGset
runApp()
library(geo2rShinyApp)
#'
#' This function allows you to plot expression data into a Mean Variance Plot
#' @param geoAccessionCode A character string representing a GEO object for download and parsing
#' @param platform A character string representing the study's platform
#' @param ex A GEO expression object which can be obtained from the extractExpressionData() function
#' @keywords GEO
#' @export
#' @import impute umap maptools ggplot2
#' @examples fig <- meanVariancePlot(expressionData, "GSE18380", "GPL4694")
#' @author Guy Hunt
meanVariancePlot <- function(geoAccessionCode = "", platform = "", ex) {
library(limma)
library(umap)
library(maptools)
library(ggplot2)
plotSA(lmFit(ex), main= paste("Mean variance trend,", geoAccessionCode))
}
runApp()
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
goodList <- list('GSE18388', 'GSE25770')
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
investigateList <- list('GSE25771', 'GSE25772')
#for(geoAccessionCode in goodList)
#{
geoAccessionCode <- "GSE18380"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
#dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
#autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
#knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
#naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
#pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
# Get fit 2
fit2 <- calculateFit2(gsms, logTransformation, limmaPrecisionWeights, forceNormalization, knnTransformation, gsetData)
# Print Top deferentially expressed genes
tT <- topDifferentiallyExpressedGenesTable(fit2, adjustment)
# Plot Histogram of fit 2 data
fig <- histogramPlot(fit2, adjustment)
# Plot Interactive Histogram of fit 2 data
fig <- interactiveHistogramPlot(fit2, adjustment)
fig
# summarize test results as "up", "down" or "not expressed"
dT <- calculateDT(fit2, adjustment, significanceLevelCutOff)
ct <- 1
dt
dT
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
goodList <- list('GSE18388', 'GSE25770')
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
investigateList <- list('GSE25771', 'GSE25772')
#for(geoAccessionCode in goodList)
#{
geoAccessionCode <- "GSE18380"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
#dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
#autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
#knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
#naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
#pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
pValueAdjustment
gsms
adjustment
columnNames
group1
adjustment
significanceLevelCutOff
usethis::use_description()
devtools::load_all()
library(devtools)
library(roxygen2)
document()
