# My first R program is Hello - World
myString <- "Hello, World!"
print ( myString)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp("App-1")
runApp("App-1")
library(shiny)
runApp("my_app")
library(shiny)
runApp("C:\Users\User\Documents\qmul_courses\ECS780P - COMPUTER PROGRAMMING - 202021\computer_programming\ECS780P - COMPUTER PROGRAMMING - 202021\r_tutorial\shiny tutorial\App-1\my_app")
library(shiny)
runApp("my_app")
source('qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/test.R')
source('qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/shiny examples.R')
source('qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/shiny examples.R')
source('qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/shiny examples.R')
source('qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/shiny examples.R')
source('qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/shiny examples.R')
source('qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/shiny examples.R')
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
library(shiny)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# See above for the definitions of ui and server
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
library(shiny)
# See above for the definitions of ui and server
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# See above for the definitions of ui and server
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello World!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# See above for the definitions of ui and server
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello World!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 5,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "orange",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# See above for the definitions of ui and server
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello World!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 5,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
source('~/qmul_courses/ECS780P - COMPUTER PROGRAMMING - 202021/computer_programming/ECS780P - COMPUTER PROGRAMMING - 202021/r_tutorial/shiny tutorial/App-1/app.R')
shiny::runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
