numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
# Get fit 2
fit2 <- calculateFit2(gsms, logTransformation, limmaPrecisionWeights, forceNormalization, knnTransformation, gsetData)
# Print Top deferentially expressed genes
tT <- topDifferentiallyExpressedGenesTable(fit2, adjustment)
# Plot Histogram of fit 2 data
fig <- histogramPlot(fit2, adjustment)
# Plot Interactive Histogram of fit 2 data
fig <- interactiveHistogramPlot(fit2, adjustment)
fig
# summarize test results as "up", "down" or "not expressed"
dT <- calculateDT(fit2, adjustment, significanceLevelCutOff)
ct <- 1
dt
dT
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
goodList <- list('GSE18388', 'GSE25770')
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
investigateList <- list('GSE25771', 'GSE25772')
#for(geoAccessionCode in goodList)
#{
geoAccessionCode <- "GSE18380"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
#dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
#autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
#knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
#naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
#pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
pValueAdjustment
gsms
adjustment
columnNames
group1
adjustment
significanceLevelCutOff
usethis::use_description()
devtools::load_all()
library(devtools)
library(roxygen2)
document()
shiny::runApp()
runApp()
runApp()
library(geo2rShinyApp)
geo2rShinyApp::loadApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list('GSE25774',"GSE18385","GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", 'GSE25778', 'GSE25776', 'GSE25775', "GSE18388",'GSE25768','GSE25767','GSE25766','GSE25765','GSE25764','GSE25763','GSE25755','GSE25752','GSE25746','GSE25745','GSE25744','GSE25743','GSE25742','GSE25741','GSE25737','GSE25736','GSE25734','GSE25733','GSE25732','GSE25731','GSE25729','GSE25728','GSE25727','GSE25725','GSE25724','GSE25722','GSE25721','GSE18458','GSE18457','GSE18456','GSE18454','GSE18453','GSE18452','GSE18451','GSE18450','GSE18449','GSE18448','GSE18447','GSE18446','GSE18445','GSE18444','GSE18443','GSE18442','GSE18441','GSE18439','GSE18438','GSE18437','GSE18435','GSE18434','GSE18432','GSE18431','GSE18430','GSE18428','GSE18427','GSE18426','GSE18424','GSE18422','GSE18421','GSE18420','GSE18419','GSE18417','GSE18416','GSE18415','GSE18414','GSE18413','GSE18412','GSE18411','GSE18409','GSE18407','GSE18404','GSE18403','GSE18399','GSE18396','GSE18394','GSE18393','GSE18392','GSE18391','GSE18390','GSE18389','GSE18388','GSE18387','GSE18386','GSE18384','GSE18383','GSE18382','GSE18380')
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
outputFile <-file("Output.txt")
goodList <- list('GSE18388', 'GSE25770')
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
investigateList <- list('GSE25771', 'GSE25772')
#for(geoAccessionCode in goodList)
#{
geoAccessionCode <- "GSE18380"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
#dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
#autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
#knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
#naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
#pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Select columns in group2
column2 <- exclusiveColumns(columnNames, group1)
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
# Get fit 2
fit2 <- calculateFit2(gsms, limmaPrecisionWeights, forceNormalization, gsetData, expressionData)
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
shiny::runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18380")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE50499"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
attributes(allGset)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
gsetData
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
experimentInformation
# Extract Sample Information
sampleInfo <- extractSampleInfo(gsetData)
sampleInfo
# Extract Sample Information
geneAnnotation <- extractGeneAnnotation(gsetData)
geneAnnotation
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18388")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE50499"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
attributes(allGset)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
gsetData
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
experimentInformation
# Extract Sample Information
sampleInfo <- extractSampleInfo(gsetData)
sampleInfo
# Extract Sample Information
geneAnnotation <- extractGeneAnnotation(gsetData)
geneAnnotation
fData(gsetData)
extractedExperimentInformation <- extractExperimentInformation(experimentInformation)
extractedExperimentInformation
runApp()
usethis::use_description()
devtools::load_all()
library(devtools)
library(roxygen2)
document()
document()
rm(list = c("calculateDifferentialGeneExpression", "calculateDifferentialGeneExpressionSummary", "calculateEachGroupsSamples", "calculateExclusiveColumns", "convertAdjustment", "convertExperimentInformation", "extractExperimentInformation", "extractExpressionData", "extractGeneAnnotation", "extractSampleDetails", "extractSampleInformation", "extractSampleNames", "interactiveBoxAndWhiskerPlot", "interactiveDesnityPlot"))
document()
rm(list = c("interactiveHeatMapPlot", "interactiveHistogramPlot", "interactiveMeanDifferencePlot", "interactiveMeanVariancePlot", "interactivePcaScreePlot", "interactivePrincompPcaIndividualsPlot", "interactivePrincompPcaScreePlot", "interactivePrincompPcaVariablesPlot", "interactiveQQPlot", "interactiveThreeDDesnityPlot", "interactiveUmapPlot", "interactiveVolcanoPlot", "nonInteractiveBoxAndWhiskerPlot", "nonInteractiveCorrelationMatrixPlot", "nonInteractiveDesnityPlot"))
document()
rm(list = c("nonInteractiveHistogramPlot", "noninteractiveMeanDifferencePlot", "nonInteractiveMeanVariancePlot", "nonInteractivePcaBiplotPlot", "nonInteractivePcaIndividualsPlot", "nonInteractivePcaScreePlot", "nonInteractivePcaVariablesPlot", "nonInteractiveQQPlot", "nonInteractiveUmapPlot", "nonInteractiveVennDiagramPlot", "nonInteractiveVolcanoPlot"))
document()
library(geo2rShinyApp)
usethis::use_description()
devtools::load_all()
library(devtools)
library(roxygen2)
document()
library(geo2rShinyApp)
library(geo2rShinyApp)
geo2rShinyApp::loadApp()
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18388")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE50499"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGeoObject(geoAccessionCode)
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
gsetData <- extractPlatformGset(allGset, platform)
gsetData
experimentInformation <- extractExperimentInformation(gsetData)
sampleInfo <- extractSampleInformation(gsetData)
expressionData <- extractExpressionData(gsetData)
columnInfo <- extractSampleDetails(gsetData)
columnInfo
autoLogInformation <- calculateAutoLogTransformApplication(expressionData)
# Import Functions
source("R/geoIntegrationFunctions.R")
source("R/dataVisualizationFunctions.R")
source("R/dataTransformationFunctions.R")
source("R/interactiveDataVisualizationFunctions.R")
source("R/differentialGeneExpressionAnalysis.R")
autoLogInformation <- calculateAutoLogTransformApplication(expressionData)
runApp()
runApp()
runApp('R')
runApp()
usethis::use_description()
devtools::load_all()
rm(list = c("calculateAutoLogTransformApplication", "calculateDifferentialGeneExpression", "calculateDifferentialGeneExpressionSummary", "calculateEachGroupsSamples", "calculateExclusiveColumns", "calculateKnnImpute", "calculateLogTransformation", "calculateNaOmit", "calculatePca", "calculatePrincompPca", "calculateTopDifferentiallyExpressedGenes", "convertAdjustment", "convertExperimentInformation"))
library(devtools)
library(roxygen2)
document()
rm(list = c("extractExperimentInformation", "extractExpressionData", "extractGeneAnnotation", "extractGeoData", "extractPlatformGset", "extractPlatforms", "extractSampleDetails", "extractSampleInformation", "extractSampleNames", "getGeoObject", "interactiveBoxAndWhiskerPlot", "interactiveDensityPlot", "interactiveHeatMapPlot", "interactiveHistogramPlot", "interactiveMeanDifferencePlot", "interactiveMeanVariancePlot", "interactivePcaScreePlot", "interactivePrincompPcaIndividualsPlot"))
document()
rm(list = c("interactivePrincompPcaScreePlot", "interactivePrincompPcaVariablesPlot", "interactiveQQPlot", "interactiveThreeDDesnityPlot", "interactiveUmapPlot", "interactiveVolcanoPlot", "nonInteractiveBoxAndWhiskerPlot", "nonInteractiveCorrelationMatrixPlot", "nonInteractiveDesnityPlot", "nonInteractiveHistogramPlot", "noninteractiveMeanDifferencePlot", "nonInteractiveMeanVariancePlot", "nonInteractivePcaBiplotPlot", "nonInteractivePcaIndividualsPlot"))
document()
rm(list = c("nonInteractivePcaScreePlot", "nonInteractivePcaVariablesPlot", "nonInteractiveQQPlot", "nonInteractiveUmapPlot", "nonInteractiveVennDiagramPlot", "nonInteractiveVolcanoPlot"))
document()
library(geo2rShinyApp)
geo2rShinyApp::loadApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
library(geo2rShinyApp)
usethis::use_description()
library(devtools)
library(roxygen2)
document()
library(devtools)
install_github("guypwhunt/r_shiny_geo2r_visulisation", auth_token = "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")
install_github("guypwhunt/r_shiny_geo2r_visulisation")
install_github("guypwhunt/r_shiny_geo2r_visulisation", force = TRUE)
library(devtools)
install_github("guypwhunt/r_shiny_geo2r_visulisation", force = TRUE)
install_github("guypwhunt/r_shiny_geo2r_visulisation", force = TRUE)
install_github("guypwhunt/r_shiny_geo2r_visulisation", force = TRUE)
install_github("guypwhunt/r_shiny_geo2r_visulisation", force = TRUE)
#'
#' This function allows you to plot a mean difference plot of the log2 fold change versus average log2 expression values from differential gene expression analysis
#' @param fit2 An object containing the results of differential gene expression analysis which can be obtained from the calculateDifferentialGeneExpression() function
#' @param dT An object that summarises if each gene is unregulated, down regulated or has a similar level of expression which can be obtained from the calculateDifferentialGeneExpressionSummary() function
#' @param ct A integer indicating the column to select from the dT object
#' @keywords GEO
#' @export
#' @examples fig <- noninteractiveMeanDifferencePlot(fit2, dT, ct)
#' @import plotly ggplot2 limma scales
#' @author Guy Hunt
noninteractiveMeanDifferencePlot <- function(fit2, dT, ct) {
# MD plot (log fold change vs mean log expression)
# highlight statistically significant (p-adj < 0.05) probes
plotMD(fit2, column=ct, status=dT[,ct], legend=F, pch=20, cex=1)
abline(h=0)
}
#' A Function to Create a Histogram of the P values from Differential Gene Expression Analysis
#'
#' This function allows you to plot a histogram of the P values from differential gene expression analysis
#' @param fit2 An object containing the results of differntial gene expression analysis which can be obtained from the calculateDifferentialGeneExpression() function
#' @param adjustment A character string containing the adjustment to P-values
#' @keywords GEO
#' @export
#' @examples fig <- nonInteractiveHistogramPlot(fit2, adjustment)
#' @import plotly ggplot2 limma scales
#' @author Guy Hunt
nonInteractiveHistogramPlot <- function(fit2, adjustment) {
tT2 <- topTable(fit2, adjust=adjustment, sort.by="B", number=Inf)
hist(tT2$adj.P.Val, col = "grey", border = "white", xlab = "P-adj",
ylab = "Number of genes", main = "P-adj value distribution")
}
library(devtools)
library(roxygen2)
document()
document()
usethis::use_description()
document()
rm(list = c("nonInteractiveHistogramPlot", "noninteractiveMeanDifferencePlot"))
document()
library(geo2rShinyApp)
library(devtools)
library(roxygen2)
usethis::use_description()
devtools::load_all()
document()
remove.packages("geo2rShinyApp")
install_github("guypwhunt/r_shiny_geo2r_visulisation", force = TRUE, ref = "master", auth_token = "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")
install_github("guypwhunt/r_shiny_geo2r_visulisation", force = TRUE, ref = "master")
library(geo2rShinyApp)
library(geo2rShinyApp)
allGset <- getGeoObject(geoAccessionCode)
geoAccessionCode <- "GSE18388"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
allGset <- getGeoObject(geoAccessionCode)
allGset <- getGeoObject(geoAccessionCode)
platforms <- extractPlatforms(allGset)
gsetData <- extractPlatformGset(allGset, platforms[1])
expressionData <- extractExpressionData(gsetData)
logExpressionData <- calculateLogTransformation(expressionData, logTransformation)
knnDataInput <- calculateKnnImpute(logExpressionData, knnTransformation)
pcaPrincompExpressionData <- calculatePrincompPca(knnDataInput)
fig <- interactivePrincompPcaScreePlot(pcaPrincompExpressionData, geoAccessionCode)
fig
use_readme_rmd(open = rlang::is_interactive())
