logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
library(plotly)
library(dplyr)
data <- pcaDataInput
clusters <- 5
pcaHC <- hclust(dist(data$scores),method = "ward.D2")
pcaClusters <- cutree(pcaHC,k=clusters)
pcaDf <- data.frame(data$scores,"cluster"=factor(pcaClusters))
pcaDf <- transform(pcaDf,cluster_name = paste("Cluster",pcaClusters))
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
,color = ~cluster_name, marker=list(size=3)
)
data <- as.data.frame(unclass(data$loadings))
fig <- fig %>% add_trace(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = 'rgb(255, 17, 17)'), name = rownames(data))
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals and Variables Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
fig <- plot_ly(type = 'scatter')
data <- as.data.frame(unclass(data$loadings))
fig <- fig %>% add_trace(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = 'rgb(255, 17, 17)'), name = rownames(data))
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals and Variables Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
data
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
library(plotly)
library(dplyr)
data <- pcaDataInput
data
clusters <- 5
pcaHC <- hclust(dist(data$scores),method = "ward.D2")
pcaClusters <- cutree(pcaHC,k=clusters)
pcaDf <- data.frame(data$scores,"cluster"=factor(pcaClusters))
pcaDf <- transform(pcaDf,cluster_name = paste("Cluster",pcaClusters))
fig <- plot_ly(type = 'scatter')
data <- as.data.frame(unclass(data$loadings))
data
fig <- fig %>% add_trace(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = 'rgb(255, 17, 17)'), name = rownames(data))
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals and Variables Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
data
attributes(data)
fig <- fig %>% add_trace(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = 'rgb(255, 17, 17)'), name = rownames(data))
fig
fig <- plot_ly(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = 'rgb(255, 17, 17)'), name = rownames(data))
fig
data <- pcaDataInput
clusters <- 5
pcaHC <- hclust(dist(data$scores),method = "ward.D2")
pcaClusters <- cutree(pcaHC,k=clusters)
pcaDf <- data.frame(data$scores,"cluster"=factor(pcaClusters))
pcaDf <- transform(pcaDf,cluster_name = paste("Cluster",pcaClusters))
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
,color = ~cluster_name, marker=list(size=3)
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Clusters from Hierachical Clustering"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
data <- as.data.frame(unclass(data$loadings))
attributes(data)
fig <- plot_ly(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = ~$row.names), name = rownames(data))
fig
fig <- plot_ly(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = ~row.names), name = rownames(data))
fig
fig <- plot_ly(data,x=~Comp.1,y=~Comp.2,text=~row.names, mode="markers", type = 'scatter'
,marker=list(size=3, color = ~row.names), name = ~row.names)
fig
fig <- plot_ly(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = rownames(data)), name = rownames(data))
fig
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
library(plotly)
library(dplyr)
data <- pcaDataInput
clusters <- 5
pcaHC <- hclust(dist(data$scores),method = "ward.D2")
pcaClusters <- cutree(pcaHC,k=clusters)
pcaDf <- data.frame(data$scores,"cluster"=factor(pcaClusters))
pcaDf <- transform(pcaDf,cluster_name = paste("Cluster",pcaClusters))
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
,color = ~cluster_name, marker=list(size=3)
)
fig <- fig %>% add_trace(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = rownames(data)), name = rownames(data))
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Clusters from Hierachical Clustering"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
library(plotly)
library(dplyr)
data <- pcaDataInput
clusters <- 5
pcaHC <- hclust(dist(data$scores),method = "ward.D2")
pcaClusters <- cutree(pcaHC,k=clusters)
pcaDf <- data.frame(data$scores,"cluster"=factor(pcaClusters))
pcaDf <- transform(pcaDf,cluster_name = paste("Cluster",pcaClusters))
data <- as.data.frame(unclass(data$loadings))
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
,color = ~cluster_name, marker=list(size=3)
)
fig <- fig %>% add_trace(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=3, color = rownames(data)), name = rownames(data))
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Clusters from Hierachical Clustering"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
shiny::runApp()
runApp()
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18384"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
library(plotly)
library(dplyr)
data <- pcaDataInput
pcaHC <- hclust(dist(data$scores),method = "ward.D2")
pcaDf <- data.frame(data$scores)
pcaDf <- transform(pcaDf)
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker=list(size=3)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot including Clusters from Hierachical Clustering"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
#, marker=list(size=3)
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot including Clusters from Hierachical Clustering"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker=list(size=3)
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot including Clusters from Hierachical Clustering"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = 'rgb(17, 157, 255)',
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
runApp()
runApp()
pcaDf <- data.frame(data$scores)
pcaDf <- transform(pcaDf)
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = 'rgb(17, 157, 255)',
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18384"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
library(plotly)
library(dplyr)
data <- pcaDataInput
#pcaHC <- hclust(dist(data$scores),method = "ward.D2")
#pcaClusters <- cutree(pcaHC,k=clusters)
#pcaDf <- data.frame(data$scores,"cluster"=factor(pcaClusters))
#pcaDf <- transform(pcaDf,cluster_name = paste("Cluster",pcaClusters))
pcaDf <- data.frame(data$scores)
pcaDf <- transform(pcaDf)
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = 'rgb(17, 157, 255)',
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18384"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
library(plotly)
library(dplyr)
# First Graph
data <- pcaDataInput
data <- as.data.frame(unclass(data$loadings))
fig <- plot_ly(data,x=~Comp.1,y=~Comp.2,text=rownames(data), mode="markers", type = 'scatter'
,marker=list(size=10, color = rownames(data)), name = rownames(data))
# Second graph
pcaDf <- data.frame(pcaDataInput$scores)
pcaDf <- transform(pcaDf)
pcaDf
data
final_df <- merge(pcaDf,data,all.x = TRUE,all.y = TRUE)
final_df
attributes(final_df)
final_df <- merge(data,pcaDf,all.x = TRUE,all.y = TRUE)
attributes(final_df)
data
attributes(data)
attributes(final_df)
final_df <- merge(data,pcaDf,all.x = TRUE,all.y = TRUE by = row.names)
final_df <- merge(data,pcaDf,all.x = TRUE,all.y = TRUE, by = row.names)
attributes(data)
data <- pcaDataInput
attributes(data)
data <- pcaDataInput
eig.val <- get_eigenvalue(data)
eig.val
res.var <- get_pca_var(data)
res.var$coord          # Coordinates
res.var$contrib        # Contributions to the PCs
res.var$cos2           # Quality of representation
res.ind <- get_pca_ind(res.pca)
pcaDf <- data.frame(data$scores)
pcaDf <- transform(pcaDf)
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = ~ res.var$cos2 ,
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = ~res.var$cos2 ,
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
res.ind$cos2           # Quality of representation
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = ~res.ind$cos2 ,
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
res.var$cos2           # Quality of representation
res.var$cos2[,1]           # Quality of representation
res.ind$cos2[1]          # Quality of representation
res.ind$cos2[,1]          # Quality of representation
pcaDf <- transform(pcaDf)
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = ~res.ind$cos2[,1],
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = "size"#~res.ind$cos2[,1]
,
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
))
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = ~res.ind$cos2[,1],
size = 3
#,line = list(color = 'rgb(0, 0, 0)',width = 1)
)
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
fig
runApp()
runApp()
res.ind$coord          # Coordinates
res.ind$contrib        # Contributions to the PCs
res.var$contrib        # Contributions to the PCs
res.var$contrib[1]        # Contributions to the PCs
eig.val <- get_eigenvalue(data)
eig.val
eig.val[2]
eig.val[2]
eig.val[2,1]
library(scales)
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = ~res.ind$cos2[,1],
size = 3
)
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title=paste("PC1", label_percent()(eig.val[2,1]))),
yaxis=list(title="PC2"))
fig
eig.val[2,1]
eig.val[2,2]
eig.val[2,0]
eig.val
eig.val[2,1]
eig.val[1,2]
pcaDf <- data.frame(data$scores)
pcaDf <- transform(pcaDf)
fig <- plot_ly(pcaDf,x=~Comp.1,y=~Comp.2,text=rownames(pcaDf), mode="markers", type = 'scatter'
, marker = list(
color = ~res.ind$cos2[,1],
size = 3
)
)
fig <- layout(fig,title= paste(geoAccessionCode, "PCA Individuals Plot"),
xaxis=list(title=paste("PC1", label_percent()(eig.val[1,2]))),
yaxis=list(title=paste("PC2", label_percent()(eig.val[2,2]))))
fig
runApp()
eig.val
eig.val
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
