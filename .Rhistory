logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
data <- na.omit(knnDataInput)
data <- lmFit(data)
data
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
data <- na.omit(knnDataInput)
data <- lmFit(data)
data
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
names(data)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
names(data)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(data)
names(data)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(t(data))
data
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(t(data))
row.names(data)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(data)
data[,1]
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(t(data))
row.names(data)
data[1]
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = row.names(data), y = data[], type = "box", quartilemethod="linear")
fig
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(t(data))
data <- as.data.frame(data)
data$row.names <- row.names(data)
data
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(t(data))
data <- as.data.frame(data)
data$row.names <- row.names(data)
attributes(data)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Box plot updates
data <- na.omit(knnDataInput)
data <- as.data.frame(t(data))
data <- as.data.frame(data)
data$row.names <- row.names(data)
attributes(data)
fig <- plot_ly(data = data, x = ~row.names, y = data, type = "box", quartilemethod="linear")
fig
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Scatter Plot Updates
data <- na.omit(knnDataInput)
data <- as.data.frame(data)
density <- density(data)
fig <- plot_ly(data = density, x = ~x, y = ~y, type = 'scatter', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
library(plotly)
library(dplyr)
#library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# Scatter Plot Updates
data <- na.omit(knnDataInput)
data <- as.data.frame(data)
density <- density(data)
density <- as.data.frame(density)
fig <- plot_ly(data = density, x = ~x, y = ~y, type = 'scatter', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
knn <- 5
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Interactive PCA Individual Plot
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
fig
shiny::runApp()
# Interactive PCA Individual Plot
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
fig
# Interactive PCA Individual Plot
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
fig
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
