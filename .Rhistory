knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
interactiveBoxAndWhiskerPlot(knnDataInput)
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
interactiveBoxAndWhiskerPlot(knnDataInput)
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
library(plotly)
mydata <- read.csv("~/Dropbox/Public/Blog statisfaction/data/density_plot.txt")
df = as.data.frame(mydata)
plot_ly(df, x = Y, y = X, z = Z, group = X, type = "scatter3d", mode = "lines")
library(plotly)
mydata <- read.csv("~/Dropbox/Public/Blog statisfaction/data/density_plot.txt")
df = as.data.frame(mydata)
plot_ly(df, x = Y, y = X, z = Z, group = X, type = "scatter3d", mode = "lines")
library(plotly)
mydata <- read.csv("~/Dropbox/Public/Blog statisfaction/data/density_plot.txt")
df = as.data.frame(mydata)
plot_ly(df, x = Y, y = X, z = Z, group = X, type = "scatter3d", mode = "lines")
library(plotly)
mydata <- read.csv("~/Dropbox/Public/Blog statisfaction/data/density_plot.txt")
df = as.data.frame(mydata)
plot_ly(df, x = Y, y = X, z = Z, group = X, type = "scatter3d", mode = "lines")
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
interactiveBoxAndWhiskerPlot(knnDataInput)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
interactiveBoxAndWhiskerPlot(knnDataInput)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
interactiveBoxAndWhiskerPlot(knnDataInput)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
interactiveBoxAndWhiskerPlot(knnDataInput)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
fig <- interactiveBoxAndWhiskerPlot(knnDataInput)
fig
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
library(plotly)
library(ggplot2)
interactiveBoxAndWhiskerPlot1 <- function(data) {
data <- na.omit(data)
data <- as.data.frame(data)
fig <- plot_ly(data, type = "box", quartilemethod="linear")
i = 1
for(col in names(data)) {
fig <- fig %>% add_trace(x = names(data)[i], y = data[,i], quartilemethod="linear", name=names(data)[i])
i <- i+1
}
return(fig)
}
fig <- interactiveBoxAndWhiskerPlot1(knnDataInput)
fig
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
library(plotly)
library(ggplot2)
fig <- interactiveBoxAndWhiskerPlot(knnDataInput)
fig
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
library(plotly)
library(ggplot2)
fig <- interactiveBoxAndWhiskerPlot(knnDataInput)
fig
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
library(plotly)
library(ggplot2)
fig <- interactiveBoxAndWhiskerPlot(knnDataInput)
plot_ly(fig)
# The purpose of this script is to test all the functions used in the shiny app
source(".\geoIntegrationFunctions/geoIntegrationFunctions.R")
source(".\dataVisualizationFunctions/dataVisualizationFunctions.R")
source(".\dataTransformationFunctions/dataTransformationFunctions.R")
source(".\interactiveDataVisualizationFunctions\interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(knnDataInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, knnDataInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, knnDataInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
library(plotly)
library(ggplot2)
fig <- interactiveBoxAndWhiskerPlot(knnDataInput)
fig
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
shiny::runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
runApp('qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
