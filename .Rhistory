sampleInfo <- extractSampleInformation(gsetData)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Get column Details
columnInfo <- extractSampleDetails(gsetData)
# Is log transformation auto applied
autoLogInformation <- calculateAutoLogTransformApplication(expressionData)
# Get a list of all the columns
columns <- extractSampleNames(expressionData)
# Apply log transformation to expression data if necessary
dataInput <- calculateLogTransformation(expressionData, logTransformation)
knnDataInput <- calculateKnnImpute(dataInput, knnTransformation)
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
runApp('R')
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
runApp('R')
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "NO"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18388")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in goodList) {
#  tryCatch({
# Get the GEO2R data for all platforms
geoAccessionCode <- "GSE89408"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
# Extract the experiment information
experimentInformation <- extractExperimentInformation(gsetData)
# Extract Sample Information
sampleInfo <- extractSampleInformation(gsetData)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Get column Details
columnInfo <- extractSampleDetails(gsetData)
# Is log transformation auto applied
autoLogInformation <- calculateAutoLogTransformApplication(expressionData)
# Get a list of all the columns
columns <- extractSampleNames(expressionData)
# Apply log transformation to expression data if necessary
dataInput <- calculateLogTransformation(expressionData, logTransformation)
knnDataInput <- calculateKnnImpute(dataInput, knnTransformation)
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "No"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18388")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in goodList) {
#  tryCatch({
# Get the GEO2R data for all platforms
geoAccessionCode <- "GSE89408"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
# Extract the experiment information
experimentInformation <- extractExperimentInformation(gsetData)
# Extract Sample Information
sampleInfo <- extractSampleInformation(gsetData)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Get column Details
columnInfo <- extractSampleDetails(gsetData)
# Is log transformation auto applied
autoLogInformation <- calculateAutoLogTransformApplication(expressionData)
# Get a list of all the columns
columns <- extractSampleNames(expressionData)
# Apply log transformation to expression data if necessary
dataInput <- calculateLogTransformation(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- calculateKnnImpute(dataInput, knnTransformation)
knnColumns <- extractSampleNames(knnDataInput)
knnColumnInfo <- extractSampleDetails(gsetData)
knnColumnInfo <- knnColumnInfo[knnColumns,]
naOmitInput <- calculateNaOmit(knnDataInput)
pcaPrincompDataInput <- calculatePrincompPca(naOmitInput)
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "No"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18388")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in goodList) {
#  tryCatch({
# Get the GEO2R data for all platforms
geoAccessionCode <- "GSE89408"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
# Extract the experiment information
experimentInformation <- extractExperimentInformation(gsetData)
# Extract Sample Information
sampleInfo <- extractSampleInformation(gsetData)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
expressionData
gsetData
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "No"  # Values can also be "Yes" or "No"
knnTransformation <- "Yes" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18388")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in goodList) {
#  tryCatch({
# Get the GEO2R data for all platforms
geoAccessionCode <- "GSE89408"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
# Extract the experiment information
experimentInformation <- extractExperimentInformation(gsetData)
experimentInformation
expressionData <- extractExpressionData(gsetData)
expressionData
typeof(expressionData)
geoAccessionCodes <- "GSE18388"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
# Extract the experiment information
experimentInformation <- extractExperimentInformation(gsetData)
# Extract Sample Information
sampleInfo <- extractSampleInformation(gsetData)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
typeof(expressionData)
expressionData
geoAccessionCode <- "GSE18388"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
# Extract the experiment information
experimentInformation <- extractExperimentInformation(gsetData)
# Extract Sample Information
sampleInfo <- extractSampleInformation(gsetData)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
typeof(expressionData)
geoAccessionCode <- "GSE89408"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
# Extract the experiment information
experimentInformation <- extractExperimentInformation(gsetData)
# Extract Sample Information
sampleInfo <- extractSampleInformation(gsetData)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
typeof(expressionData)
typeof(expressionData) == "logical"
runApp('R')
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
library(rsconnect)
rsconnect::setAccountInfo(name='GEOexplorer', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
#rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "GEOexplorer")
rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
geoAccessionCode <- "GSE89408"
allGset <- getGeoObject(geoAccessionCode)
# Get a list of all the platforms
platforms <- extractPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- extractPlatformGset(allGset, platform)
attr(gsetData)
attributes(gsetData)
gsetData$assayData
gsetData$phenoData
assayData(gsetData)
phenoData(gsetData)
featureData(gsetData)
protocolData(gsetData)
gsetData@assayData
a<- gsetData@phenoData
a
attributes(a)
attributes(gsetData@assayData)
attributes(gsetData@phenoData)
attributes(featureData(gsetData))
attributes(protocolData(gsetData))
library(devtools)
library(roxygen2)
document()
rm(list = c("a", "calculateAutoLogTransformApplication", "calculateDifferentialGeneExpression", "calculateDifferentialGeneExpressionSummary", "calculateEachGroupsSamples", "calculateEachGroupsSamplesFromDataFrame", "calculateExclusiveColumns", "calculateKnnImpute", "calculateLogTransformation", "calculateNaOmit", "calculatePca", "calculatePrincompPca", "calculateTopDifferentiallyExpressedGenes", "convertAdjustment", "convertExperimentInformation", "extractExperimentInformation"))
document()
rm(list = c("extractExpressionData", "extractGeoData", "extractPlatformGset", "extractPlatforms", "extractSampleDetails", "extractSampleInformation", "extractSampleNames", "getGeoObject", "interactiveBoxAndWhiskerPlot", "interactiveDensityPlot", "interactiveHeatMapPlot", "interactiveHistogramPlot", "interactiveMeanDifferencePlot", "interactiveMeanVariancePlot", "interactivePcaScreePlot", "interactivePrincompPcaIndividualsPlot", "interactivePrincompPcaScreePlot"))
document()
rm(list = c("interactivePrincompPcaVariablesPlot", "interactiveQQPlot", "interactiveThreeDDesnityPlot", "interactiveUmapPlot", "interactiveVolcanoPlot", "loadApp", "nonInteractiveBoxAndWhiskerPlot", "nonInteractiveCorrelationMatrixPlot", "nonInteractiveDesnityPlot", "nonInteractiveHistogramPlot", "noninteractiveMeanDifferencePlot", "nonInteractiveMeanVariancePlot", "nonInteractivePcaBiplotPlot", "nonInteractivePcaIndividualsPlot", "nonInteractivePcaScreePlot"))
document()
m(list = c("nonInteractivePcaVariablesPlot", "nonInteractiveQQPlot", "nonInteractiveUmapPlot", "nonInteractiveVennDiagramPlot", "nonInteractiveVolcanoPlot"))
rm(list = c("nonInteractivePcaVariablesPlot", "nonInteractiveQQPlot", "nonInteractiveUmapPlot", "nonInteractiveVennDiagramPlot", "nonInteractiveVolcanoPlot"))
document()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
# Source the files
source("R/app.R")
source("R/backendDifferentialGeneExpressionDataFunctions.R")
source("R/backendExploratoryDataAnalysisDataFunctions.R")
source("R/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/interactiveExploratoryDataAnalysisDataVisualizationFunctions.R")
source("R/nonInteractiveDifferentialGeneExpressionDataVisualizationFunctions.R")
source("R/nonInteractiveExploratoryDataAnalysisDataVisualizationFunctions.R")
# Launch app
loadApp()
library(devtools)
library(roxygen2)
document()
# Create documentation
document()
rm(list = c("calculateAutoLogTransformApplication", "calculateDifferentialGeneExpression", "calculateDifferentialGeneExpressionSummary", "calculateEachGroupsSamples", "calculateEachGroupsSamplesFromDataFrame", "calculateExclusiveColumns", "calculateKnnImpute", "calculateLogTransformation", "calculateNaOmit", "calculatePca", "calculatePrincompPca", "calculateTopDifferentiallyExpressedGenes", "convertAdjustment"))
document()
rm(list = c("calculateAutoLogTransformApplication", "calculateDifferentialGeneExpression", "calculateDifferentialGeneExpressionSummary", "calculateEachGroupsSamples", "calculateEachGroupsSamplesFromDataFrame", "calculateExclusiveColumns", "calculateKnnImpute", "calculateLogTransformation", "calculateNaOmit", "calculatePca", "calculatePrincompPca", "calculateTopDifferentiallyExpressedGenes", "convertAdjustment", "convertExperimentInformation", "extractExperimentInformation", "extractExpressionData", "extractGeoData", "extractPlatformGset", "extractPlatforms", "extractSampleDetails", "extractSampleInformation", "extractSampleNames", "getGeoObject", "interactiveBoxAndWhiskerPlot", "interactiveDensityPlot", "interactiveHeatMapPlot", "interactiveHistogramPlot", "interactiveMeanDifferencePlot"))
document()
rm(list = c("calculateAutoLogTransformApplication", "calculateDifferentialGeneExpression", "calculateDifferentialGeneExpressionSummary", "calculateEachGroupsSamples", "calculateEachGroupsSamplesFromDataFrame", "calculateExclusiveColumns", "calculateKnnImpute", "calculateLogTransformation", "calculateNaOmit", "calculatePca", "calculatePrincompPca", "calculateTopDifferentiallyExpressedGenes", "convertAdjustment", "convertExperimentInformation", "extractExperimentInformation", "extractExpressionData", "extractGeoData", "extractPlatformGset", "extractPlatforms", "extractSampleDetails", "extractSampleInformation", "extractSampleNames", "getGeoObject", "interactiveBoxAndWhiskerPlot", "interactiveDensityPlot", "interactiveHeatMapPlot", "interactiveHistogramPlot", "interactiveMeanDifferencePlot", "interactiveMeanVariancePlot", "interactivePcaScreePlot", "interactivePrincompPcaIndividualsPlot", "interactivePrincompPcaScreePlot", "interactivePrincompPcaVariablesPlot", "interactiveQQPlot", "interactiveThreeDDesnityPlot", "interactiveUmapPlot", "interactiveVolcanoPlot", "loadApp", "nonInteractiveBoxAndWhiskerPlot", "nonInteractiveCorrelationMatrixPlot", "nonInteractiveDesnityPlot", "nonInteractiveHistogramPlot", "noninteractiveMeanDifferencePlot"))
document()
rm(list = c("calculateAutoLogTransformApplication", "calculateDifferentialGeneExpression", "calculateDifferentialGeneExpressionSummary", "calculateEachGroupsSamples", "calculateEachGroupsSamplesFromDataFrame", "calculateExclusiveColumns", "calculateKnnImpute", "calculateLogTransformation", "calculateNaOmit", "calculatePca", "calculatePrincompPca", "calculateTopDifferentiallyExpressedGenes", "convertAdjustment", "convertExperimentInformation", "extractExperimentInformation", "extractExpressionData", "extractGeoData", "extractPlatformGset", "extractPlatforms", "extractSampleDetails", "extractSampleInformation", "extractSampleNames", "getGeoObject", "interactiveBoxAndWhiskerPlot", "interactiveDensityPlot", "interactiveHeatMapPlot", "interactiveHistogramPlot", "interactiveMeanDifferencePlot", "interactiveMeanVariancePlot", "interactivePcaScreePlot", "interactivePrincompPcaIndividualsPlot", "interactivePrincompPcaScreePlot", "interactivePrincompPcaVariablesPlot", "interactiveQQPlot", "interactiveThreeDDesnityPlot", "interactiveUmapPlot", "interactiveVolcanoPlot", "loadApp", "nonInteractiveBoxAndWhiskerPlot", "nonInteractiveCorrelationMatrixPlot", "nonInteractiveDesnityPlot", "nonInteractiveHistogramPlot", "noninteractiveMeanDifferencePlot", "nonInteractiveMeanVariancePlot", "nonInteractivePcaBiplotPlot", "nonInteractivePcaIndividualsPlot", "nonInteractivePcaScreePlot", "nonInteractivePcaVariablesPlot", "nonInteractiveQQPlot", "nonInteractiveUmapPlot", "nonInteractiveVennDiagramPlot", "nonInteractiveVolcanoPlot"))
document()
library(rsconnect)
rsconnect::setAccountInfo(name='GEOexplorer', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
#rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "GEOexplorer")
rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
