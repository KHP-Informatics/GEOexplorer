library(plotly)
library(dplyr)
library(limma)
#library(umap)
#library(maptools)
#library(ggplot2)
# Mean Varience Done
data <- na.omit(knnDataInput)
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma)
fig
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, naOmitInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, naOmitInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
library(plotly)
library(ggplot2)
fig <- interactiveBoxAndWhiskerPlot(knnDataInput, geoAccessionCode, platform                                 )
fig
# Interactive Density Plot
fig <- interactiveDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# 3D Interactive Density Plot
fig <- interactiveThreeDDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# Interactive UMAP
fig <- interactiveUmapPlot(naOmitInput)
fig
# Interactive Mean Variance Plot
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, naOmitInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, naOmitInput)
# Principal component analysis scree plot
pcaScreePlot(pcaDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaDataInput)
# Interactive Box-and-Whisker Plot
library(plotly)
library(ggplot2)
fig <- interactiveBoxAndWhiskerPlot(knnDataInput, geoAccessionCode, platform                                 )
fig
# Interactive Density Plot
fig <- interactiveDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# 3D Interactive Density Plot
fig <- interactiveThreeDDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# Interactive UMAP
fig <- interactiveUmapPlot(naOmitInput)
fig
# Interactive Mean Variance Plot
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
library(plotly)
library(ggplot2)
library(limma)
interactiveBoxAndWhiskerPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = "box", quartilemethod="linear")
i = 1
for(col in names(data)) {
fig <- fig %>% add_trace(x = names(data)[i], y = data[,i], quartilemethod="linear", name=names(data)[i])
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode, "/"), platform)))
fig
}
interactiveDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode,platform),'value distribution')),
xaxis = list(title = 'Intensity'),
yaxis = list(title = 'Density'))
fig
}
interactiveThreeDDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter3d', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = i, z = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(
title = (paste(paste(geoAccessionCode,platform),'value distribution')),
scene = list(
xaxis = list(title = "Intensity"),
yaxis = list(title = ""),
zaxis = list(title = "Density")
))
fig
}
# Look into consolidating data <- na.omit(data) function
interactiveUmapPlot <- function(data) {
data <- data[!duplicated(data), ]  # remove duplicates
nNeighbors <- 5
ump <- umap(t(ex), n_neighbors = nNeighbors, random_state = 123)
i <- 1
fig <- plot_ly(type = 'scatter', mode = 'markers')
for(row in row.names(ump$layout)){
fig <- fig %>% add_trace(x = ump$layout[i,][1], y = ump$layout[i,][2], name = row)
i <- i+1
}
fig <- fig %>% layout(
title = (paste('UMAP plot, number of nearest neighbors used =',nNeighbors)))
fig
}
interactiveMeanVariancePlot <- function(data, geoAccessionCode) {
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma, type = 'scatter', mode = 'markers', marker = list(
color = 'rgb(17, 157, 255)',
size = 20,
line = list(
color = 'rgb(231, 99, 250)',
width = 2
)))
fig <- fig %>% layout(
title = (paste('Mean variance trend, ',geoAccessionCode)))
fig
}
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
library(plotly)
library(ggplot2)
library(limma)
interactiveBoxAndWhiskerPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = "box", quartilemethod="linear")
i = 1
for(col in names(data)) {
fig <- fig %>% add_trace(x = names(data)[i], y = data[,i], quartilemethod="linear", name=names(data)[i])
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode, "/"), platform)))
fig
}
interactiveDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode,platform),'value distribution')),
xaxis = list(title = 'Intensity'),
yaxis = list(title = 'Density'))
fig
}
interactiveThreeDDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter3d', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = i, z = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(
title = (paste(paste(geoAccessionCode,platform),'value distribution')),
scene = list(
xaxis = list(title = "Intensity"),
yaxis = list(title = ""),
zaxis = list(title = "Density")
))
fig
}
# Look into consolidating data <- na.omit(data) function
interactiveUmapPlot <- function(data) {
data <- data[!duplicated(data), ]  # remove duplicates
nNeighbors <- 5
ump <- umap(t(ex), n_neighbors = nNeighbors, random_state = 123)
i <- 1
fig <- plot_ly(type = 'scatter', mode = 'markers')
for(row in row.names(ump$layout)){
fig <- fig %>% add_trace(x = ump$layout[i,][1], y = ump$layout[i,][2], name = row)
i <- i+1
}
fig <- fig %>% layout(
title = (paste('UMAP plot, number of nearest neighbors used =',nNeighbors)))
fig
}
interactiveMeanVariancePlot <- function(data, geoAccessionCode) {
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma, type = 'scatter', mode = 'markers', marker = list(
color = 'rgb(17, 157, 255)',
size = 5,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
)))
fig <- fig %>% layout(
title = (paste('Mean variance trend, ',geoAccessionCode)))
fig
}
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
library(plotly)
library(ggplot2)
library(limma)
interactiveBoxAndWhiskerPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = "box", quartilemethod="linear")
i = 1
for(col in names(data)) {
fig <- fig %>% add_trace(x = names(data)[i], y = data[,i], quartilemethod="linear", name=names(data)[i])
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode, "/"), platform)))
fig
}
interactiveDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode,platform),'value distribution')),
xaxis = list(title = 'Intensity'),
yaxis = list(title = 'Density'))
fig
}
interactiveThreeDDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter3d', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = i, z = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(
title = (paste(paste(geoAccessionCode,platform),'value distribution')),
scene = list(
xaxis = list(title = "Intensity"),
yaxis = list(title = ""),
zaxis = list(title = "Density")
))
fig
}
# Look into consolidating data <- na.omit(data) function
interactiveUmapPlot <- function(data) {
data <- data[!duplicated(data), ]  # remove duplicates
nNeighbors <- 5
ump <- umap(t(ex), n_neighbors = nNeighbors, random_state = 123)
i <- 1
fig <- plot_ly(type = 'scatter', mode = 'markers')
for(row in row.names(ump$layout)){
fig <- fig %>% add_trace(x = ump$layout[i,][1], y = ump$layout[i,][2], name = row)
i <- i+1
}
fig <- fig %>% layout(
title = (paste('UMAP plot, number of nearest neighbors used =',nNeighbors)))
fig
}
interactiveMeanVariancePlot <- function(data, geoAccessionCode) {
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma, type = 'scatter', mode = 'markers', marker = list(
color = 'rgb(17, 157, 255)',
size = 2,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
)))
fig <- fig %>% layout(
title = (paste('Mean variance trend, ',geoAccessionCode)))
fig
}
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
library(plotly)
library(ggplot2)
library(limma)
interactiveBoxAndWhiskerPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = "box", quartilemethod="linear")
i = 1
for(col in names(data)) {
fig <- fig %>% add_trace(x = names(data)[i], y = data[,i], quartilemethod="linear", name=names(data)[i])
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode, "/"), platform)))
fig
}
interactiveDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode,platform),'value distribution')),
xaxis = list(title = 'Intensity'),
yaxis = list(title = 'Density'))
fig
}
interactiveThreeDDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter3d', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = i, z = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(
title = (paste(paste(geoAccessionCode,platform),'value distribution')),
scene = list(
xaxis = list(title = "Intensity"),
yaxis = list(title = ""),
zaxis = list(title = "Density")
))
fig
}
# Look into consolidating data <- na.omit(data) function
interactiveUmapPlot <- function(data) {
data <- data[!duplicated(data), ]  # remove duplicates
nNeighbors <- 5
ump <- umap(t(ex), n_neighbors = nNeighbors, random_state = 123)
i <- 1
fig <- plot_ly(type = 'scatter', mode = 'markers')
for(row in row.names(ump$layout)){
fig <- fig %>% add_trace(x = ump$layout[i,][1], y = ump$layout[i,][2], name = row)
i <- i+1
}
fig <- fig %>% layout(
title = (paste('UMAP plot, number of nearest neighbors used =',nNeighbors)))
fig
}
interactiveMeanVariancePlot <- function(data, geoAccessionCode) {
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma, type = 'scatter', mode = 'markers', marker = list(
color = 'rgb(17, 157, 255)',
size = 2))
fig <- fig %>% layout(
title = (paste('Mean variance trend, ',geoAccessionCode)))
fig
}
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
library(plotly)
library(ggplot2)
library(limma)
interactiveBoxAndWhiskerPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = "box", quartilemethod="linear")
i = 1
for(col in names(data)) {
fig <- fig %>% add_trace(x = names(data)[i], y = data[,i], quartilemethod="linear", name=names(data)[i])
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode, "/"), platform)))
fig
}
interactiveDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(title = (paste(paste(geoAccessionCode,platform),'value distribution')),
xaxis = list(title = 'Intensity'),
yaxis = list(title = 'Density'))
fig
}
interactiveThreeDDesnityPlot <- function(data, geoAccessionCode, platform) {
data <- as.data.frame(data)
fig <- plot_ly(type = 'scatter3d', mode = 'lines', name = (paste(paste(geoAccessionCode,platform),'value distribution')))
i <- 1
for(col in names(data)) {
density <- density(data[,i])
fig <- fig %>% add_trace(x = density$x, y = i, z = density$y, name = col)
i <- i+1
}
fig <- fig %>% layout(
title = (paste(paste(geoAccessionCode,platform),'value distribution')),
scene = list(
xaxis = list(title = "Intensity"),
yaxis = list(title = ""),
zaxis = list(title = "Density")
))
fig
}
# Look into consolidating data <- na.omit(data) function
interactiveUmapPlot <- function(data) {
data <- data[!duplicated(data), ]  # remove duplicates
nNeighbors <- 5
ump <- umap(t(ex), n_neighbors = nNeighbors, random_state = 123)
i <- 1
fig <- plot_ly(type = 'scatter', mode = 'markers')
for(row in row.names(ump$layout)){
fig <- fig %>% add_trace(x = ump$layout[i,][1], y = ump$layout[i,][2], name = row)
i <- i+1
}
fig <- fig %>% layout(
title = (paste('UMAP plot, number of nearest neighbors used =',nNeighbors)))
fig
}
interactiveMeanVariancePlot <- function(data, geoAccessionCode) {
data <- lmFit(data)
data <- as.data.frame(data)
fig <- plot_ly(data = data, x = ~Amean, y = ~sigma, type = 'scatter', mode = 'markers', marker = list(
color = 'rgb(17, 157, 255)',
size = 3,
line = list(
color = 'rgb(0, 0, 0)',
width = 1
)))
fig <- fig %>% layout(
title = (paste('Mean variance trend, ',geoAccessionCode)))
fig
}
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
