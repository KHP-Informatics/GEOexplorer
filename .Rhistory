# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaAnalysis(naOmitInput)
library(plotly)
library(dplyr)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- as.data.frame(pcaAnalysis(naOmitInput))
pcaDataInput2 <- as.data.frame(pcaPrincompAnalysis(naOmitInput))
attributes(pcaDataInput)
attributes(pcaDataInput2)
pcaDataInput <- pcaAnalysis(naOmitInput)
pcaDataInput2 <- pcaPrincompAnalysis(naOmitInput)
attributes(pcaDataInput)
attributes(pcaDataInput2)
pcaDataInput2$loadings
colnames(pcaDataInput2$loadings)
columnNames <-   colnames(pcaDataInput2$loadings)
proportionOfVariance <- data$sdev^2/sum(data$sdev^2)
pcaDataFrame <- data.frame(columnNames, proportionOfVariance)
attributes(pcaDataInput2)
pcaDataInput2$sdev
columnNames
proportionOfVariance
proportionOfVariance <- pcaDataInput2$sdev^2/sum(pcaDataInput2$sdev^2)
proportionOfVariance
pcaDataFrame <- data.frame(columnNames, proportionOfVariance)
fig <- plot_ly(data = pcaDataFrame, x = ~columnNames, y = ~proportionOfVariance, type = "bar") %>%
layout(
title = paste(geoAccessionCode, "Scree Plot"),
xaxis = list(title = "Principal Components/Dimensions",
categoryorder = "array",
categoryarray = ~columnNames),
yaxis = list(title = "Percentage of Explained Variances",
tickformat = "%")
)
fig
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Interactive PCA Scree Plot
fig <- interactivePrincompPcaScreePlot(pcaPrincompDataInput, geoAccessionCode)
fig
# Principal component analysis scree plot
pcaScreePlot(pcaPrincompDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaPrincompDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaPrincompDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaPrincompDataInput)
runApp()
pcaCars <- princomp(mtcars,cor = TRUE)
names(pcaCars)
summary(pcaCars)
plot(pcaCars,type="l")
carsHC <- hclust(dist(pcaCars$scores),method = "ward.D2")
plot(carsHC)
carsClusters <- cutree(carsHC,k=3)
plot(carsClusters)
carsDf <- data.frame(pcaCars$scores,"cluster"=factor(carsClusters))
carsDf <- transform(carsDf,cluster_name = paste("Cluster",carsClusters))
library(ggplot2)
p1 <- ggplot(carsDf,aes(x=Comp.1,y=Comp.2))+
theme_classic()+
geom_hline(yintercept = 0,color="gray70")+
geom_vline(xintercept = 0,color="gray70")+
geom_point(aes(color=cluster),alpha=0.55,size=3)+
xlab("PC1")+
ylab("PC2")+
xlim(-5,6)+
ggtitle("PCA Clusters from Hierarchical Clustering of Cars Data")
p1+geom_text(aes(y=Comp.2+0.25,label=rownames(carsDf)))
library(plotly)
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers"
#,color = cluster_name,marker=list(size=11)
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaAnalysis(naOmitInput)
library(plotly)
library(dplyr)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
carsHC <- hclust(dist(pcaDataInput$scores),method = "ward.D2")
plot(carsHC)
plot(carsHC)
plot(carsClusters)
carsDf <- data.frame(pcaDataInput$scores,"cluster"=factor(carsClusters))
carsDf <- transform(carsDf,cluster_name = paste("Cluster",carsClusters))
library(ggplot2)
pcaDataInput$scores
factor(carsClusters)
carsDf <- data.frame(pcaDataInput$scores,"cluster"=factor(carsClusters))
carsDf <- transform(carsDf,cluster_name = paste("Cluster",carsClusters))
library(ggplot2)
pcaCars <- princomp(mtcars,cor = TRUE)
names(pcaCars)
summary(pcaCars)
plot(pcaCars,type="l")
carsHC <- hclust(dist(pcaCars$scores),method = "ward.D2")
plot(carsHC)
carsClusters <- cutree(carsHC,k=3)
plot(carsClusters)
pcaCars$scores
factor(carsClusters)
carsHC <- hclust(dist(pcaDataInput$scores),method = "ward.D2")
carsClusters <- cutree(carsHC,k=3)
factor(carsClusters)
carsDf <- data.frame(pcaDataInput$scores,"cluster"=factor(carsClusters))
carsDf <- transform(carsDf,cluster_name = paste("Cluster",carsClusters))
library(ggplot2)
library(ggplot2)
p1 <- ggplot(carsDf,aes(x=Comp.1,y=Comp.2))+
theme_classic()+
geom_hline(yintercept = 0,color="gray70")+
geom_vline(xintercept = 0,color="gray70")+
geom_point(aes(color=cluster),alpha=0.55,size=3)+
xlab("PC1")+
ylab("PC2")+
xlim(-5,6)+
ggtitle("PCA Clusters from Hierarchical Clustering of Cars Data")
p1+geom_text(aes(y=Comp.2+0.25,label=rownames(carsDf)))
library(plotly)
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers"
,color = cluster_name,marker=list(size=11)
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
library(plotly)
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers"
,color = cluster_name,marker=list(size=11), type = "scatter"
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
library(plotly)
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers", type = 'scatter'
,color = cluster_name,marker=list(size=11)
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
library(plotly)
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers", type = 'scatter'
,color = cluster_name,marker=list(size=11)
)
library(plotly)
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers", type = 'scatter'
#,color = cluster_name,marker=list(size=11)
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
library(plotly)
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers", type = 'scatter'
,color = ~cluster_name,marker=list(size=11)
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers", type = 'scatter'
,color = ~cluster_name,marker=list(size=1)
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
p <- plot_ly(carsDf,x=~Comp.1,y=~Comp.2,text=rownames(carsDf), mode="markers", type = 'scatter'
,color = ~cluster_name,marker=list(size=3)
)
p <- layout(p,title="PCA Clusters from Hierachical Clustering of Cars Data",
xaxis=list(title="PC1"),
yaxis=list(title="PC2"))
p
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, naOmitInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, naOmitInput)
# Principal component analysis scree plot
pcaScreePlot(pcaPrincompDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaPrincompDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaPrincompDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaPrincompDataInput)
# Interactive Box-and-Whisker Plot
fig <- interactiveBoxAndWhiskerPlot(knnDataInput, geoAccessionCode, platform                                 )
fig
# Interactive Density Plot
fig <- interactiveDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# 3D Interactive Density Plot
fig <- interactiveThreeDDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# Interactive UMAP
fig <- interactiveUmapPlot(naOmitInput)
fig
# Interactive Mean Variance Plot
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
# Interactive PCA Scree Plot
fig <- interactivePrincompPcaScreePlot(pcaPrincompDataInput, geoAccessionCode)
fig
# Interactive PCA Individual Plot
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
fig
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
carsHC <- hclust(dist(pcaDataInput$scores),method = "ward.D2")
carsHC <- hclust(dist(pcaDataInput$scores),method = "ward.D2")
# The purpose of this script is to test all the functions used in the shiny app
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
source("./geoIntegrationFunctions/geoIntegrationFunctions.R")
source("./dataVisualizationFunctions/dataVisualizationFunctions.R")
source("./dataTransformationFunctions/dataTransformationFunctions.R")
source("./interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
pcaDataInput <- pcaAnalysis(naOmitInput)
library(plotly)
library(dplyr)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaPrincompAnalysis(naOmitInput)
carsHC <- hclust(dist(pcaDataInput$scores),method = "ward.D2")
carsClusters <- cutree(carsHC,k=3)
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Interactive PCA Individual Plot
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
fig
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Interactive PCA Individual Plot
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
fig
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# Perform PCA analysis on KNN transformation expression data
pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Box-and-Whisker Plot
boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Expression Value Distribution Plot
expressionValueDistributionPlot(geoAccessionCode, platform, knnDataInput)
# Mean-Variance Plot
meanVariancePlot(geoAccessionCode, platform, naOmitInput)
# UMAP plot (multi-dimensional scaling)
umapPlot(geoAccessionCode, platform, naOmitInput)
# Principal component analysis scree plot
pcaScreePlot(pcaPrincompDataInput)
# Principal component analysis individuals plot
pcaIndividualsPlot(pcaPrincompDataInput)
# Principal component analysis variables plot
pcaVariablesPlot(pcaPrincompDataInput)
# Principal component analysis biplot of individuals and variables
pcaBiplotPlot(pcaPrincompDataInput)
# Interactive Box-and-Whisker Plot
fig <- interactiveBoxAndWhiskerPlot(knnDataInput, geoAccessionCode, platform                                 )
fig
# Interactive Density Plot
fig <- interactiveDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# 3D Interactive Density Plot
fig <- interactiveThreeDDesnityPlot(naOmitInput, geoAccessionCode, platform)
fig
# Interactive UMAP
fig <- interactiveUmapPlot(naOmitInput)
fig
# Interactive Mean Variance Plot
fig <- interactiveMeanVariancePlot(naOmitInput, geoAccessionCode)
fig
# Interactive PCA Scree Plot
fig <- interactivePrincompPcaScreePlot(pcaPrincompDataInput, geoAccessionCode)
fig
# Interactive PCA Individual Plot
fig <- interactivePrincompPcaIndividualsPlot(pcaPrincompDataInput, geoAccessionCode)
fig
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
geoAccessionCode <- "GSE18380"
platform <- "GPL4694"
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "No"
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
runApp()
