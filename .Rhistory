shiny::runApp('geo2rShinyApp')
runApp('geo2rShinyApp')
runApp('geo2rShinyApp')
runApp('geo2rShinyApp')
runApp('geo2rShinyApp')
shiny::runApp('geo2rShinyApp')
runApp('geo2rShinyApp')
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
shiny::runApp('interactiveGeo2rVisualisation/R')
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18380")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GDS10"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
attributes(allGset)
setwd("./geo2rShinyAppPackage")
document()
setwd("..")
setwd("./geo2rShinyAppPackage")
document()
library(devtools)
library(roxygen2)
document()
rm(list = c("extractExperimentInformation", "extractExpressionData", "extractGeneAnnotation", "extractSampleInfo", "getColumnDetails", "getExperimentInformation", "getGeoData", "getGset", "getPlatformGset", "getPlatforms", "isLogTransformAutoApplied", "knnDataTransformation", "logTransformExpressionData", "naOmitTransformation", "pcaAnalysis", "pcaPrincompAnalysis"))
document()
document()
setwd("..")
install("geo2rShinyAppPackage")
library(geo2rShinyAppPackage)
?naOmitTransformation
setwd("./geo2rShinyAppPackage")
document()
setwd("..")
install("geo2rShinyAppPackage")
install("geo2rShinyAppPackage")
library(geo2rShinyAppPackage)
?naOmitTransformation
setwd("..")
setwd("./geo2rShinyAppPackage")
setwd("./documents")
setwd("./geo2rShinyAppPackage")
document()
setwd("..")
install("geo2rShinyAppPackage")
library(geo2rShinyAppPackage)
?naOmitTransformation
?logTransformExpressionData
# Import necessary libraries
library(devtools)
library(roxygen2)
setwd("./geo2rShinyAppPackage")
document()
setwd("..")
install("geo2rShinyAppPackage")
library(geo2rShinyAppPackage)
?logTransformExpressionData
logTransformExpressionData()
setwd("./geo2rShinyAppPackage")
document()
setwd("..")
install("geo2rShinyAppPackage")
library(geo2rShinyAppPackage)
?getGset
library(geo2rShinyAppPackage)
?getGset
setwd("./geo2rShinyAppPackage")
document()
# Import necessary libraries
library(devtools)
library(roxygen2)
document()
setwd("..")
install("geo2rShinyAppPackage")
library(geo2rShinyAppPackage)
?getGset
library(geo2rShinyAppPackage)
?getGset
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
library(stringr)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
geoAccessionCodes <- list("GSE18380")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.05
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE50499"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
attributes(allGset)
platforms <- getPlatforms(allGset)
platform <- platforms[1]
gsetData <- getPlatformGset(allGset, platform)
gsetData
experimentInformation <- getExperimentInformation(gsetData)
experimentInformation
sampleInfo <- extractSampleInfo(gsetData)
sampleInfo
geneAnnotation <- extractGeneAnnotation(gsetData)
geneAnnotation
expressionData <- extractExpressionData(gsetData)
expressionData
columnInfo <- getColumnDetails(gsetData)
columnInfo
autoLogInformation <- isLogTransformAutoApplied(expressionData)
shiny::runApp()
usethis::use_description()
devtools::load_all()
library(shiny)
monthFeedbackUI <- function(id) {
textOutput(NS(id, "feedback"))
}
monthFeedbackServer <- function(id, month) {
stopifnot(is.reactive(month))
moduleServer(id, function(input, output, session) {
output$feedback <- renderText({
if (month() == "October") {
"You picked a great month!"
} else {
"Eh, you could do better."
}
})
})
}
stones <- vroom::vroom("birthstones.csv")
birthstoneUI <- function(id) {
p(
"The birthstone for ", textOutput(NS(id, "month"), inline = TRUE),
" is ", textOutput(NS(id, "stone"), inline = TRUE)
)
}
birthstoneServer <- function(id, month) {
stopifnot(is.reactive(month))
moduleServer(id, function(input, output, session) {
stone <- reactive(stones$stone[stones$month == month()])
output$month <- renderText(month())
output$stone <- renderText(stone())
})
}
months <- c(
"January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December"
)
ui <- navbarPage(
"Sample app",
tabPanel("Pick a month",
selectInput("month", "What's your favourite month?", choices = months)
),
tabPanel("Feedback", monthFeedbackUI("tab1")),
tabPanel("Birthstone", birthstoneUI("tab2"))
)
server <- function(input, output, session) {
monthFeedbackServer("tab1", reactive(input$month))
birthstoneServer("tab2", reactive(input$month))
}
shinyApp(ui, server)
devtools::load_all()
devtools::load_all()
library(roxygen2)
roxygenise()
devtools::load_all()
library(geo2rShinyApp)
myApp()
library(geo2rShinyApp)
?myApp
?logTransformExpressionData
usethis::use_description()
devtools::load_all()
library(devtools)
library(roxygen2)
setwd("./geo2rShinyApp")
document()
library(geo2rShinyApp)
install("geo2rShinyApp")
library(geo2rShinyApp)
pkgload::load_all(".")
geo2rShinyApp::myApp()
devtools::load_all()
library(devtools)
library(roxygen2)
library(geo2rShinyApp)
library(geo2rShinyApp)
install("geo2rShinyApp")
setwd("..")
install("geo2rShinyApp")
library(geo2rShinyApp)
pkgload::load_all(".")
geo2rShinyApp::myApp()
library(geo2rShinyApp)
library(geo2rShinyApp)
pkgload::load_all(".")
setwd("./geo2rShinyApp")
pkgload::load_all(".")
geo2rShinyApp::myApp()
runApp()
runApp()
library(geo2rShinyApp)
library(geo2rShinyApp)
pkgload::load_all(".")
pkgload::load_all(".")
geo2rShinyApp::myApp()
library(geo2rShinyApp)
geo2rShinyApp::myApp()
pkgload::load_all(".")
geo2rShinyApp::myApp()
githubinstall("r_shiny_geo2r_visulisation")
install.packages(githubinstall)
install.packages("dplyr")
library(devtools)
install_github("hadley/dplyr")
library(devtools)
install_github("guypwhunt/r_shiny_geo2r_visulisation")
install_github("guypwhunt/geo2rShinyApp")
install.packages("dplyr")
install.packages("githubinstall")
install_github("guypwhunt/r_shiny_geo2r_visulisation")
library(geo2rShinyApp)
geo2rShinyApp::myApp()
pkgload::load_all(".")
geo2rShinyApp::myApp()
library(geo2rShinyApp)
library(geo2rShinyApp)
geo2rShinyApp::myApp()
library(geo2rShinyApp)
?logTransformExpressionData
library(geo2rShinyApp)
?logTransformExpressionData
library(geo2rShinyApp)
?logTransformExpressionData
devtools::load_all()
library(devtools)
library(roxygen2)
document()
library(geo2rShinyApp)
install("geo2rShinyApp")
library(geo2rShinyApp)
geo2rShinyApp::loadApp()
x <- 1
x + 1
x * 5
