cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Differential expression analysis with limma
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE18388", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6246", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
testFunction <- function(gset){
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "00001111"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Group1","Group2"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
return(tT)
}
x <- testFunction(gset)
write.table(x)
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
outputFile <-file("output.txt")
geoAccessionCodes = list("GSE18388")
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE18388"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
group1 <- list ("GSM458594", "GSM458595", "GSM458596", "GSM458597")
group2 <- list ("GSM458598", "GSM458599", "GSM458600", "GSM458601")
group3 <- list ()
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2, group3)
print(gsms)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
group1 <- list ("GSM458594", "GSM458595", "GSM458596", "GSM458597")
group2 <- list ("GSM458598", "GSM458599", "GSM458600", "GSM458601")
group3 <- list ()
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2, group3)
print(gsms)
# Get fit2 data
fit2 <- differentialGeneExpression(gsetData, gsms)
fit2 <- differentialGeneExpression(gsetData, gsms)
fit2 <- differentialGeneExpression(gsetData, gsms)
fit2 <- differentialGeneExpression(gsetData, gsms)
tT <- topDifferentiallyExpressedGenesTable(gsetData)
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Differential expression analysis with limma
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
testFunction <- function(geoAccessionCode){
gset <- getGEO(geoAccessionCode, GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6246", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "00001111"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Group1","Group2"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
return(tT)
}
x <- testFunction("GSE18388")
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Differential expression analysis with limma
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
testFunction <- function(geoAccessionCode){
gset <- getGEO(geoAccessionCode, GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6246", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "00001111"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Group1","Group2"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
return(tT)
}
x <- testFunction("GSE18388")
write.table(x)
tT <- topDifferentiallyExpressedGenesTable("GSE18388")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
tT <- topDifferentiallyExpressedGenesTable("GSE18388")
write.table(tT, file=stdout(), row.names=F, sep="\t")
runApp()
type(tT)
typeof(tT)
as.data.frame(tT)
as.data.frame(tT, row.names=F)
as.data.frame(tT, row.names=FALSE)
as.data.frame(tT)
runApp()
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/User/Documents/qmul_courses/ECS750PECS751PECS753PECS754PECS7500P - EECS MSC PROJECT - 202021/shiny_geo2r_visulisation', appName = "geo2r_data_visulisation")
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/guypw/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
install.packages('remotes')
install.packages('pacman')
rsconnect::deployApp('C:/Users/guypw/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
outputFile <-file("output.txt")
geoAccessionCodes = list("GSE18388")
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE18388"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
#gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# This function was retired
# Box-and-Whisker Plot
#boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
columnNames <- extractColumns(expressionData)
group1 <- list ("GSM458594", "GSM458595", "GSM458596", "GSM458597")
group2 <- list ("GSM458598", "GSM458599", "GSM458600", "GSM458601")
gsms <- calculateGsms(columnNames,group1, group2)
fit2 <- differentialGeneExpression(gsetData, gsms)
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
tT <- topDifferentiallyExpressedGenesTable2(fit2)
runApp()
runApp()
#tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC"))
return(tT)
runApp()
tT <- topDifferentiallyExpressedGenesTable2(fit2)
attributes(tT)
tT$logFC
tT$ID
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
tT <- topDifferentiallyExpressedGenesTable("GSE18388")
tT <- topDifferentiallyExpressedGenesTable2(fit2)
attributes(tT)
tT$ID
attributes(tT)
tT["ID"] <- rownames(tT)
attributes(tT)
tT$ID
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
tT <- topDifferentiallyExpressedGenesTable2(fit2)
attributes(tT)
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
fit2 <- differentialGeneExpression(gsetData, gsms)
tT <- topDifferentiallyExpressedGenesTable(fit2)
attributes(tT)
runApp()
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
outputFile <-file("output.txt")
geoAccessionCodes = list("GSE18388")
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE18388"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
#gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# This function was retired
# Box-and-Whisker Plot
#boxAndWhiskerPlot(geoAccessionCode, platform, knnDataInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
group1 <- list ("GSM458594", "GSM458595", "GSM458596", "GSM458597")
group2 <- list ("GSM458598", "GSM458599", "GSM458600", "GSM458601")
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Get fit2 data
fit2 <- differentialGeneExpression(gsetData, gsms)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
group1 <- list ("GSM458594", "GSM458595", "GSM458596", "GSM458597")
group2 <- list ("GSM458598", "GSM458599", "GSM458600", "GSM458601")
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Get fit2 data
fit2 <- differentialGeneExpression(gsetData, gsms)
# Print Top deferentially expressed genes
tT <- topDifferentiallyExpressedGenesTable(fit2)
# Plot Histogram of fit 2 data
fig <- histogramPlot(fit2)
group1 <- list ("GSM458594", "GSM458595", "GSM458596")
gsms <- calculateGsms(columnNames,group1, group2)
print(gsms)
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
fit2 <- differentialGeneExpression(gsetData, gsms)
tT <- topDifferentiallyExpressedGenesTable(fit2)
fig <- histogramPlot(fit2)
runApp()
fit2 <- differentialGeneExpression(gsetData, knnDataInput, gsms)
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
fit2 <- differentialGeneExpression(gsetData, knnDataInput, gsms)
fvarLabels(gset) <- make.names(fvarLabels(gsetData))
print(fvarLabels(gset))
fvarLabels(gset) <- make.names(fvarLabels(knnDataInput))
print(fvarLabels(gset))
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
fit2 <- differentialGeneExpression(gsetData, knnDataInput, gsms)
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
fit2 <- differentialGeneExpression(gsetData, knnDataInput, gsms)
tT <- topDifferentiallyExpressedGenesTable(fit2)
runApp()
# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
outputFile <-file("output.txt")
geoAccessionCodes = list("GSE18388")
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE18388"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
#gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
group1 <- list ("GSM458594", "GSM458595", "GSM458596") #, "GSM458597")
group2 <- list ("GSM458598", "GSM458599", "GSM458600", "GSM458601")
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Get fit2 data
fit2 <- differentialGeneExpression(gsetData, knnDataInput, gsms)
# Print Top deferentially expressed genes
tT <- topDifferentiallyExpressedGenesTable(fit2)
# Plot Histogram of fit 2 data
fig <- histogramPlot(fit2)
fig
# summarize test results as "up", "down" or "not expressed"
dT <- dT(fit2)
# Venn diagram of results
fig <- vennDiagramPlot(dT)
fig
# create Q-Q plot for t-statistic
fig <- qqPlot(fit2)
fig
# volcano plot (log P-value vs log fold change)
fig <- volcanoPlot(fit2, dT)
fig
# MD plot (log fold change vs mean log expression)
fig <- mdPlot(fit2, dT)
fig
#  }, error = function(e) {
#    write(as.character(geoAccessionCode),file = outputFile, append = TRUE, sep = "\n")
#    close(outputFile)
#  })
#}
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/guypw/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
