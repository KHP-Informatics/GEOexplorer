# The purpose of this script is to test all the functions used in the shiny app
# Change the below file path to the file path you save the repo to
setwd('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp')
# Import Functions
source("geoIntegrationFunctions/geoIntegrationFunctions.R")
source("dataVisualizationFunctions/dataVisualizationFunctions.R")
source("dataTransformationFunctions/dataTransformationFunctions.R")
source("interactiveDataVisualizationFunctions/interactiveDataVisualizationFunctions.R")
source("differentialGeneExpressionAnalysis/differentialGeneExpressionAnalysis.R")
source("interactiveDataVisualizationFunctions/interactiveDifferentialGeneExpressionDataVisualizationFunctions.R")
# Import Libraries
library(plotly)
library(ggplot2)
# Input Values
logTransformation <- "Auto-Detect"  # Values can also be "Yes" or "No"
knnTransformation <- "No" # Values can also be "Yes"
knn <- 2
outputFile <-file("output.txt")
geoAccessionCodes <- list("GSE18388")
pValueAdjustment <- "Benjamini & Hochberg (False discovery rate)"
limmaPrecisionWeights <- "No"
forceNormalization <- "No"
platformAnnotation <- "NCBI generated"
significanceLevelCutOff <- 0.50
goodList <- list("GSE18385", "GSE18397", "GSE18400", "GSE18408", "GSE18423", "GSE18433", "GSE18434", "GSE18438","GSE18439","GSE18441", "GSE18442", "GSE18443","GSE18444","GSE18445","GSE18446","GSE18447","GSE18448", "GSE18449","GSE18450","GSE18451", "GSE25728", "GSE25734", "GSE25752", "GSE25721", "GSE25722", "GSE25724", "GSE25725", "GSE25727", "GSE25729", "GSE25731", "GSE25732", "GSE25733", "GSE25736","GSE25737","GSE25741","GSE25742","GSE25743","GSE25744","GSE25745","GSE25746", "GSE25755", "GSE25763","GSE25764","GSE25765","GSE25766","GSE25767","GSE25768","GSE25770","GSE25771","GSE25772","GSE25774","GSE25775","GSE25776","GSE25778","GSE25778", "GSE18380","GSE18382","GSE18383", "GSE18384", "GSE18386","GSE18387","GSE18388","GSE18389","GSE18390","GSE18391","GSE18392","GSE18393","GSE18394","GSE18396", "GSE18399", "GSE18403","GSE18404","GSE18407", "GSE18409","GSE18411","GSE18412","GSE18413","GSE18414","GSE18415","GSE18416","GSE18417","GSE18419","GSE18420","GSE18421","GSE18422", "GSE18424","GSE18426","GSE18427","GSE18428","GSE18430","GSE18431","GSE18432","GSE18435","GSE18437", "GSE18452","GSE18453","GSE18454","GSE18456","GSE18457","GSE18458")
badList <- list("GSE25758", "GSE25762", "GSE25723", "GSE18459") # The first two have only 1 column, the third is just massive and the fourth errors on GEO2R
#for(geoAccessionCode in geoAccessionCodes)
#{
geoAccessionCode <- "GSE18388"#"GSE18388"
#  tryCatch({
# Get the GEO2R data for all platforms
allGset <- getGset(geoAccessionCode, platformAnnotation)
# Get a list of all the platforms
platforms <- getPlatforms(allGset)
platform <- platforms[1]
# Extract the GEO2R data from the specified platform
gsetData <- getPlatformGset(allGset, platform)
# Get column Details
getColumnDetails <- getColumnDetails(gsetData)
# Extract the experiment information
experimentInformation <- getExperimentInformation(gsetData)
# This function was retired
# Get GEO2R data
gsetData <- getGeoData(geoAccessionCode, platform)
# Extract expression data
expressionData <- extractExpressionData(gsetData)
# Apply log transformation to expression data if necessary
#dataInput <- logTransformExpressionData(expressionData, logTransformation)
# Is log transformation auto applied
#autoLogInformation <- isLogTransformAutoApplied(expressionData)
# Perform KNN transformation on log expression data if necessary
#knnDataInput <- knnDataTransformation(dataInput, knnTransformation)
# Remove all incomplete rows
#naOmitInput <- naOmitTransformation(knnDataInput)
# This function was retired
# Perform PCA analysis on KNN transformation expression data
# pcaDataInput <- pcaAnalysis(naOmitInput)
# Perform PCA analysis on KNN transformation expression data
#pcaPrincompDataInput <- pcaPrincompAnalysis(naOmitInput)
# Differential gene expression analysis functions
# Get column names
columnNames <- extractColumns(expressionData)
# Define Groups
numberOfColumns <- length(columnNames)
numberOfColumns <- numberOfColumns + 1
halfNumberOfColumns <- ceiling(numberOfColumns/2)
i <- 0
group1 <- c()
group2 <- c()
for (name in columnNames) {
if (i < halfNumberOfColumns) {
group1 <- c(group1, name)
i <- i +1
} else {
group2 <- c(group2, name)
i <- i +1
}
}
# Calculate gsms
gsms <- calculateGsms(columnNames,group1, group2)
# Convert P value adjustment
adjustment <- adjustmentCalculation(pValueAdjustment)
# Get fit2 data
#fit2 <- differentialGeneExpression(gsetData, knnDataInput, gsms, limmaPrecisionWeights, forceNormalization)
# Get fit 2 2
fit2 <- calculateFit2(geoAccessionCode, platform, platformAnnotation, gsms, logTransformation, limmaPrecisionWeights, forceNormalization, knnTransformation)
# Print Top deferentially expressed genes
tT <- topDifferentiallyExpressedGenesTable(fit2, adjustment)
# Plot Histogram of fit 2 data
fig <- histogramPlot(fit2, adjustment)
# Plot Interactive Histogram of fit 2 data
fig <- interactiveHistogramPlot(fit2, adjustment)
fig
# summarize test results as "up", "down" or "not expressed"
dT <- dT(fit2, adjustment, significanceLevelCutOff)
# Venn diagram of results
fig <- vennDiagramPlot(dT)
# create Q-Q plot for t-statistic
fig <- qqPlot(fit2)
# Plot Interactive Q-Q plot for t-statistic
fig <- interactiveQQPlot(fit2, dT, ct)
fig
# volcano plot (log P-value vs log fold change)
ct <- 1
fig <- volcanoPlot(fit2, dT, ct)
# Interactive volcano plot (log P-value vs log fold change)
fig <- interactiveVolcanoPlot(fit2, dT, ct)
fig
# MD plot (log fold change vs mean log expression)
fig <- mdPlot(fit2, dT, ct)
# Plot Interactive Mean Difference of fit 2 data
fig <- interactiveMeanDifferencePlot(fit2, dT, ct)
fig
runApp()
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Differential expression analysis with limma
library(GEOquery)
library(limma)
library(umap)
library(plotly)
# load series and platform data from GEO
gset <- getGEO("GSE18388", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL6246", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "00001111"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Group1","Group2"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)#
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
fit2
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
# Visualize and quality control test results.
# Build histogram of P-values for all genes. Normal test
# assumption is that most genes are not differentially expressed.
tT2 <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
# summarize test results as "up", "down" or "not expressed"
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.90)
attributes(fit2$genes)
attributes(fit2$genes$Gene.symbol)
fit2$genes$Gene.symbol
attributes(fit2$genes)
attributes(fit2$genes$names)
fit2$genes$Gene.title
fit2$genes$Gene.title[1:2, ]
fit2$genes$Gene.title[1:1, ]
fit2$genes$Gene.title[1, ]
head(fit2$genes$Gene.title,4)
attributes(fit)
attributes(fit$genes)
head(fit$genes$Gene.title,4)
attributes(exprs(gset))
head(exprs(gset)$Gene.title,4)
x <- exprs(gset)
head(x$Gene.title,4)
attributes(x)
x$ID
ID(x)
x@ID
x$names
x$genes
attributes(x)
attributes(gset)
attributes(exprs(gset))
attributes(gset)
fit2Df <- data.frame(row.names(fit2$genes), (0-log10(fit2$p.value)), fit2$coefficients, dT[,ct])
colnames(fit2Df) <- c("geneID", "pValues", "coefficients", "regulation")
fit2Df$regulation[fit2Df$regulation == "1"] <- "Upregulated"
fit2Df$regulation[fit2Df$regulation == "0"] <- "Similar Expression"
fit2Df$regulation[fit2Df$regulation == "-1"] <- "Downregulation"
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers', text = ~geneID, hovertemplate = "<b>Gene ID: </b>%{text}<br></br><b>Y Coordinate: </b>%{y}<br></br><b>X Coordinate: </b>%{x}",
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
attributes(fit2$genes)
unique(fit2$genes[c("Gene.symbol")])
fit2Df <- data.frame(row.names(fit2$genes), (0-log10(fit2$p.value)), fit2$coefficients, dT[,ct], fit2$genes$Gene.symbol)
colnames(fit2Df) <- c("geneID", "pValues", "coefficients", "regulation", "geneSymbol")
attributes(fit2$genes)
fit2Df <- data.frame(row.names(fit2$genes), (0-log10(fit2$p.value)), fit2$coefficients, dT[,ct], fit2$genes$Gene.symbol, fit2$genes$Gene.title, fit2$genes$Gene.ID)
colnames(fit2Df) <- c("ID", "pValues", "coefficients", "regulation", "geneSymbol", "geneTitle", "geneID")
fit2Df <- data.frame(row.names(fit2$genes), (0-log10(fit2$p.value)), fit2$coefficients, dT[,ct], fit2$genes$Gene.symbol, fit2$genes$Gene.title, fit2$genes$Gene.ID)
colnames(fit2Df) <- c("ID", "pValues", "coefficients", "regulation", "geneSymbol", "geneTitle", "geneID")
fit2Df$regulation[fit2Df$regulation == "1"] <- "Upregulated"
fit2Df$regulation[fit2Df$regulation == "0"] <- "Similar Expression"
fit2Df$regulation[fit2Df$regulation == "-1"] <- "Downregulation"
fit2Df <- data.frame(row.names(fit2$genes), (0-log10(fit2$p.value)), fit2$coefficients, dT[,ct], fit2$genes$Gene.symbol, fit2$genes$Gene.title, fit2$genes$Gene.ID)
colnames(fit2Df) <- c("id", "pValues", "coefficients", "regulation", "geneSymbol", "geneTitle", "geneID")
fit2Df$regulation[fit2Df$regulation == "1"] <- "Upregulated"
fit2Df$regulation[fit2Df$regulation == "0"] <- "Similar Expression"
fit2Df$regulation[fit2Df$regulation == "-1"] <- "Downregulation"
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers', text = ~id, hovertemplate = "<b>Gene ID: </b>%{text}<br></br><b>Y Coordinate: </b>%{y}<br></br><b>X Coordinate: </b>%{x}",
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers', text = ~id, text1 = ~geneSymbol, hovertemplate = "<b>ID: </b>%{text}<br></br><b>Y Coordinate: </b>%{y}<br></br><b>X Coordinate: </b>%{x}",
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = ~paste('ID: ', id)
hovertemplate = "<b>ID: </b>%{text}<br></br><b>Y Coordinate: </b>%{y}<br></br><b>X Coordinate: </b>%{x}",
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = paste('ID: ', id)
hovertemplate = "<b>ID: </b>%{text}<br></br><b>Y Coordinate: </b>%{y}<br></br><b>X Coordinate: </b>%{x}",
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = paste('ID: ', ~id)
hovertemplate = "<b>ID: </b>%{text}<br></br><b>Y Coordinate: </b>%{y}<br></br><b>X Coordinate: </b>%{x}",
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = ~paste('ID: ', id),
hovertemplate = "<b>ID: </b>%{text}<br></br><b>Y Coordinate: </b>%{y}<br></br><b>X Coordinate: </b>%{x}",
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = ~paste('ID: ', id, 'Gene ID: ', geneID, 'Gene Symbol: ', geneSymbol, 'Gene Title: ', geneTitle, 'Log2 Fold Change: ', coefficients, '-Log10(P-Value): ', pValues),
hoverinfo = text,
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fig <- plot_ly(data = fit2Df, x = ~coefficients, y = ~pValues, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = ~paste('ID: ', id, '<br></br>', 'Gene ID: ', geneID, '<br></br>', 'Gene Symbol: ', geneSymbol, '<br></br>', 'Gene Title: ', geneTitle, '<br></br>', 'Log2 Fold Change: ', coefficients, '<br></br>', '-Log10(P-Value): ', pValues),
hoverinfo = text,
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Log2 Fold Change"
),
yaxis = list(
title = "-log10(P-value)"
))
fig
fit2Df <- data.frame(row.names(fit2$genes), fit2$Amean, fit2$coefficients, dT[,ct], fit2$genes$Gene.symbol, fit2$genes$Gene.title, fit2$genes$Gene.ID)
colnames(fit2Df) <- c("geneID", "aMean", "coefficients", "regulation", "geneSymbol", "geneTitle", "geneID")
fit2Df$regulation[fit2Df$regulation == "1"] <- "Upregulated"
fit2Df$regulation[fit2Df$regulation == "0"] <- "Similar Expression"
fit2Df$regulation[fit2Df$regulation == "-1"] <- "Downregulation"
fig <- plot_ly(data = fit2Df, x = ~aMean, y = ~coefficients, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = ~paste('ID: ', id, '<br></br>', 'Gene ID: ', geneID, '<br></br>', 'Gene Symbol: ', geneSymbol, '<br></br>', 'Gene Title: ', geneTitle, '<br></br>', 'Average Log-Expression: ', aMean, '<br></br>', 'Log-Fold-Change: ', coefficients),
hoverinfo = text,
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Average log-expression"
),
yaxis = list(
title = "log-fold-change"
))
fig
fit2Df <- data.frame(row.names(fit2$genes), fit2$Amean, fit2$coefficients, dT[,ct], fit2$genes$Gene.symbol, fit2$genes$Gene.title, fit2$genes$Gene.ID)
colnames(fit2Df) <- c("id", "aMean", "coefficients", "regulation", "geneSymbol", "geneTitle", "geneID")
fit2Df$regulation[fit2Df$regulation == "1"] <- "Upregulated"
fit2Df$regulation[fit2Df$regulation == "0"] <- "Similar Expression"
fit2Df$regulation[fit2Df$regulation == "-1"] <- "Downregulation"
fig <- plot_ly(data = fit2Df, x = ~aMean, y = ~coefficients, color = ~regulation, colors = c("blue", "black", "red"), type = 'scatter', mode = 'markers',
text = ~paste('ID: ', id, '<br></br>', 'Gene ID: ', geneID, '<br></br>', 'Gene Symbol: ', geneSymbol, '<br></br>', 'Gene Title: ', geneTitle, '<br></br>', 'Average Log-Expression: ', aMean, '<br></br>', 'Log-Fold-Change: ', coefficients),
hoverinfo = text,
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Group1-Group2'),
xaxis = list(
title = "Average log-expression"
),
yaxis = list(
title = "log-fold-change"
))
fig
t.good <- which(!is.na(fit2$F)) # filter out bad probes
qqData <- qqt(fit2$t[t.good], fit2$df.total[t.good], main="Moderated t statistic", plot.it = FALSE)
qqData2 <- data.frame(qqData, dT[,ct])
qqData2
attrinutes(fit2$genes)
attributes(fit2$genes)
qqData2 <- data.frame(qqData, dT[,ct], fit2$genes$ID, fit2$genes$Gene.symbol, fit2$genes$Gene.title, fit2$genes$Gene.ID)
attributes(qqData2)
colnames(qqData2) <- c("x", "y", "regulation", "id", "geneSymbol", "geneTitle", "geneID")
qqData2$regulation <- as.character(qqData2$regulation)
qqData2$regulation[qqData2$regulation == "1"] <- "Upregulated"
qqData2$regulation[qqData2$regulation == "0"] <- "Similar Expression"
qqData2$regulation[qqData2$regulation == "-1"] <- "Downregulation"
t.good <- which(!is.na(fit2$F)) # filter out bad probes
qqData <- qqt(fit2$t[t.good], fit2$df.total[t.good], main="Moderated t statistic", plot.it = FALSE)
qqData2 <- data.frame(qqData, dT[,ct], fit2$genes$ID, fit2$genes$Gene.symbol, fit2$genes$Gene.title, fit2$genes$Gene.ID)
colnames(qqData2) <- c("x", "y", "regulation", "id", "geneSymbol", "geneTitle", "geneID")
qqData2$regulation <- as.character(qqData2$regulation)
qqData2$regulation[qqData2$regulation == "1"] <- "Upregulated"
qqData2$regulation[qqData2$regulation == "0"] <- "Similar Expression"
qqData2$regulation[qqData2$regulation == "-1"] <- "Downregulation"
fig <- plot_ly()
fig <- fig %>% add_trace( data = qqData2, x = ~x, y = ~y, type = 'scatter', mode = 'markers', color = ~regulation, colors = c("blue", "black", "red"),
text = ~paste('ID: ', id, '<br></br>', 'Gene ID: ', geneID, '<br></br>', 'Gene Symbol: ', geneSymbol, '<br></br>', 'Gene Title: ', geneTitle, '<br></br>', 'Theoretical Quantiles: ', x, '<br></br>', 'Sample Quantiles: ', y),
hoverinfo = text,
marker = list(size = 3))
fig <- fig %>% layout(
title = ('Moderated t statistic'),
xaxis = list(
title = "Theoretical Quantiles"
),
yaxis = list(
title = "Sample Quantiles"
))
fig
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
runApp()
runApp()
runApp()
runApp()
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Differential expression analysis with limma
library(GEOquery)
library(limma)
library(umap)
library(plotly)
# load series and platform data from GEO
gset <- getGEO("GSE18388", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6246", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "00001111"
sml <- strsplit(gsms, split="")[[1]]
# log2 transformation
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("Group1","Group2"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
fit <- lmFit(gset, design)  # fit linear model
# set up contrasts of interest and recalculate model coefficients
cts <- paste(groups[1], groups[2], sep="-")
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)#
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
runApp()
runApp()
runApp()
runApp()
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE18388", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6246", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
# log2 transform
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
# box-and-whisker plot
par(mar=c(7,4,2,1))
title <- paste ("GSE18388", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
# expression value distribution plot
par(mar=c(4,4,2,1))
title <- paste ("GSE18388", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, main=title, legend=F)
# mean-variance trend
ex <- na.omit(ex) # eliminate rows with NAs
plotSA(lmFit(ex), main="Mean variance trend, GSE18388")
# UMAP plot (multi-dimensional scaling)
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 4, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=4", xlab="", ylab="", pch=20, cex=1.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
attributes(ex)
attributes(ex$dimnames)
attributes(gset)
attributes(ex)
attributes(gset)
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE18388", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6246", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
# log2 transform
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
ex
help(GEOquery)
help(??GEOquery)
help('??GEOquery')
type(gset)
typeof(gset)
help(gset)
dir(gset)
library(rsconnect)
rsconnect::setAccountInfo(name='geo2r-shiny-data-visualisation', token='0495C06EF4D78607202154CB2C603266', secret='FLzkd5VS0pHAoH7A9zbWgkb1aj/Ltm2dJveefq2V')
options(repos = BiocManager::repositories())
rsconnect::deployApp('C:/Users/guypw/OneDrive/Documents/geo2rShinyApp', appName = "geo2r_data_visulisation")
